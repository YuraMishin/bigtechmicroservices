// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/YuraMishin/bigtechmicroservices/order/internal/model"
	mock "github.com/stretchr/testify/mock"

	order_v1 "github.com/YuraMishin/bigtechmicroservices/shared/pkg/openapi/order/v1"

	uuid "github.com/google/uuid"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// CancelOrderByUUID provides a mock function with given fields: ctx, order
func (_m *OrderService) CancelOrderByUUID(ctx context.Context, order model.Order) (order_v1.CancelOrderByUUIDRes, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrderByUUID")
	}

	var r0 order_v1.CancelOrderByUUIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) (order_v1.CancelOrderByUUIDRes, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) order_v1.CancelOrderByUUIDRes); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(order_v1.CancelOrderByUUIDRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CancelOrderByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrderByUUID'
type OrderService_CancelOrderByUUID_Call struct {
	*mock.Call
}

// CancelOrderByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - order model.Order
func (_e *OrderService_Expecter) CancelOrderByUUID(ctx interface{}, order interface{}) *OrderService_CancelOrderByUUID_Call {
	return &OrderService_CancelOrderByUUID_Call{Call: _e.mock.On("CancelOrderByUUID", ctx, order)}
}

func (_c *OrderService_CancelOrderByUUID_Call) Run(run func(ctx context.Context, order model.Order)) *OrderService_CancelOrderByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Order))
	})
	return _c
}

func (_c *OrderService_CancelOrderByUUID_Call) Return(_a0 order_v1.CancelOrderByUUIDRes, _a1 error) *OrderService_CancelOrderByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CancelOrderByUUID_Call) RunAndReturn(run func(context.Context, model.Order) (order_v1.CancelOrderByUUIDRes, error)) *OrderService_CancelOrderByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewOrder provides a mock function with given fields: ctx, req
func (_m *OrderService) CreateNewOrder(ctx context.Context, req *order_v1.CreateOrderRequest) (order_v1.CreateNewOrderRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewOrder")
	}

	var r0 order_v1.CreateNewOrderRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order_v1.CreateOrderRequest) (order_v1.CreateNewOrderRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order_v1.CreateOrderRequest) order_v1.CreateNewOrderRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(order_v1.CreateNewOrderRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order_v1.CreateOrderRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CreateNewOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewOrder'
type OrderService_CreateNewOrder_Call struct {
	*mock.Call
}

// CreateNewOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - req *order_v1.CreateOrderRequest
func (_e *OrderService_Expecter) CreateNewOrder(ctx interface{}, req interface{}) *OrderService_CreateNewOrder_Call {
	return &OrderService_CreateNewOrder_Call{Call: _e.mock.On("CreateNewOrder", ctx, req)}
}

func (_c *OrderService_CreateNewOrder_Call) Run(run func(ctx context.Context, req *order_v1.CreateOrderRequest)) *OrderService_CreateNewOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order_v1.CreateOrderRequest))
	})
	return _c
}

func (_c *OrderService_CreateNewOrder_Call) Return(_a0 order_v1.CreateNewOrderRes, _a1 error) *OrderService_CreateNewOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CreateNewOrder_Call) RunAndReturn(run func(context.Context, *order_v1.CreateOrderRequest) (order_v1.CreateNewOrderRes, error)) *OrderService_CreateNewOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByUUID provides a mock function with given fields: ctx, orderUUID
func (_m *OrderService) GetOrderByUUID(ctx context.Context, orderUUID uuid.UUID) (model.Order, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByUUID")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Order, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Order); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetOrderByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByUUID'
type OrderService_GetOrderByUUID_Call struct {
	*mock.Call
}

// GetOrderByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID uuid.UUID
func (_e *OrderService_Expecter) GetOrderByUUID(ctx interface{}, orderUUID interface{}) *OrderService_GetOrderByUUID_Call {
	return &OrderService_GetOrderByUUID_Call{Call: _e.mock.On("GetOrderByUUID", ctx, orderUUID)}
}

func (_c *OrderService_GetOrderByUUID_Call) Run(run func(ctx context.Context, orderUUID uuid.UUID)) *OrderService_GetOrderByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *OrderService_GetOrderByUUID_Call) Return(_a0 model.Order, _a1 error) *OrderService_GetOrderByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_GetOrderByUUID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Order, error)) *OrderService_GetOrderByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// PayOrder provides a mock function with given fields: ctx, order, req
func (_m *OrderService) PayOrder(ctx context.Context, order model.Order, req *order_v1.PayOrderRequest) (order_v1.PayOrderRes, error) {
	ret := _m.Called(ctx, order, req)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 order_v1.PayOrderRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Order, *order_v1.PayOrderRequest) (order_v1.PayOrderRes, error)); ok {
		return rf(ctx, order, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Order, *order_v1.PayOrderRequest) order_v1.PayOrderRes); ok {
		r0 = rf(ctx, order, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(order_v1.PayOrderRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Order, *order_v1.PayOrderRequest) error); ok {
		r1 = rf(ctx, order, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type OrderService_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order model.Order
//   - req *order_v1.PayOrderRequest
func (_e *OrderService_Expecter) PayOrder(ctx interface{}, order interface{}, req interface{}) *OrderService_PayOrder_Call {
	return &OrderService_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, order, req)}
}

func (_c *OrderService_PayOrder_Call) Run(run func(ctx context.Context, order model.Order, req *order_v1.PayOrderRequest)) *OrderService_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Order), args[2].(*order_v1.PayOrderRequest))
	})
	return _c
}

func (_c *OrderService_PayOrder_Call) Return(_a0 order_v1.PayOrderRes, _a1 error) *OrderService_PayOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_PayOrder_Call) RunAndReturn(run func(context.Context, model.Order, *order_v1.PayOrderRequest) (order_v1.PayOrderRes, error)) *OrderService_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
