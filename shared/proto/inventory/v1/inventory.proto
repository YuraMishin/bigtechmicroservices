syntax = "proto3";

package inventory.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/YuraMishin/bigtechmicroservices/shared/pkg/proto/inventory/v1;inventory_v1";

service InventoryService {
  rpc GetPart(GetPartRequest) returns (GetPartResponse);

  rpc ListParts(ListPartsRequest) returns (ListPartsResponse);
}

// GetPartRequest represents a request to retrieve a part by its UUID
message GetPartRequest {
  string uuid = 1;
}

// GetPartResponse represents the response containing the requested part
message GetPartResponse {
  Part part = 1;
}

// ListPartsRequest represents a request to list parts with optional filtering
message ListPartsRequest {
  PartsFilter filter = 1;
}

// ListPartsResponse represents the response containing a list of parts
message ListPartsResponse {
  repeated Part parts = 1;
}

// PartsFilter represents filtering criteria for parts
message PartsFilter {
  repeated string uuids = 1;
  repeated string names = 2;
  repeated Category categories = 3;
  repeated string manufacturer_countries = 4;
  repeated string tags = 5;
}

// Part represents an inventory item with all its properties
message Part {
  string uuid = 1;
  string name = 2;
  string description = 3;
  double price = 4;
  int64 stock_quantity = 5;
  Category category = 6;
  Dimensions dimensions = 7;
  Manufacturer manufacturer = 8;
  repeated string tags = 9;
  map<string, Value> metadata = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

// Category represents the type of inventory part
enum Category {
  CATEGORY_UNSPECIFIED = 0;
  CATEGORY_ENGINE = 1;
  CATEGORY_FUEL = 2;
  CATEGORY_PORTHOLE = 3;
  CATEGORY_WING = 4;
}

// Dimensions represents the physical dimensions of a part
message Dimensions {
  double length = 1;
  double width = 2;
  double height = 3;
  double weight = 4;
}

// Manufacturer represents the company that produced the part
message Manufacturer {
  string name = 1;
  string country = 2;
  string website = 3;
}

// Value represents a flexible data type that can hold different primitive values
message Value {
  oneof kind {
    string string_value = 1;
    int64 int64_value = 2;
    double double_value = 3;
    bool bool_value = 4;
  }
}
